#+TODO: TODO SEMI | DONE

* TODO local deletions don't check for conflicts
if between two syncs the local event is deleted and the remote one
updated conflict detection doesn't trigger and the remote event is
deleted.

the problem is that it could have been a refile as well, which means
all the deletion, conflict decision, can only be done in a last step,
which would need to know the previous state as well.

a new version which fixes this and a couple of other complications by
keeping track of all files at the same time is being developed in the
org-sync branch (still conceptual phase, though)

* TODO newlines are sometimes lost or added on a remote change of the events description or timestamps
probably due to ignored :post-blank, :pre-blank properties in the
reconstructed headline.

* SEMI org-element-timestamp-interpreter forgets the repeater information of range timestamps
http://thread.gmane.org/gmane.emacs.orgmode/64489

this means that remote changes to a range timestamp with repeating
info, f.ex. <2013-01-10 Thu 20:00 +1d>--<2013-01-10 Thu 20:15 +1d>,
will put <2013-01-10 Thu 20:00>--<2013-01-10 Thu 20:15> in the org
file and push that change to the caldav server on the next sync.

** Fixed in org-mode master
commit b68103a34430819b16c74a54f9bb62978b209748
Author: Nicolas Goaziou <n.goaziou@gmail.com>
Date:   Thu Jan 10 13:57:37 2013 +0100

org-element: Correctly interpret timestamps ranges with repeaters

** TODO Add info about minimal needed version somewhere?

* SEMI repeater-type is not synced (is there an ical equivalent?) and might be lost locally
when parsing the ical repeater info into an org-element timestamp
the :repeater-type is assumed to be cummulate (those with one +).

other types will probably be overwritten when there is a remote
change.

** DONE ugly work around
if old-timestamp has :repeater-type and new-timestamp
has :repeater-type

set :repeater-type of new-timestamp to the one of the old one

* TODO from multiple timestamps on the same headline only the first one is used
the others are preserved but ignored.

has ical a possibility for more than one time per event or would we
need to add multiple events? how would we store the different UIDS?

* TODO connection drops during a sync aren't handled gracefully

any return code from the caldav server upon retrieval of an
event which is not in (304 200 404 410) will be answered with
(error "Couldn't retrieve event") and thus abort the sync.

** during normal sync of existing events
only 2 bad things can happen:

1. events which have been marked for remote deletion are forgotten and
   then synced as new events to the inbox on the next run.
2. the state is not written back to disk (so if you quit or crashed
   emacs before the next sync or calling org-e-caldav-write-state
   yourself you would have an old version of the state on the next
   run and you might have to resolve a bunch of conflicts)

** during adding new remote events locally
nothing happens

* TODO depends on obsolete cl macro flet
cl-flet and cl-letf are no replacement as they use lexical scope
instead of dynamical scope and wouldn't work in this case

the problem is that url-retrieve tries to act on 403 not modified by
extracting the page from its cache, where it wouldn't find it and
error out, because we add the If-Last-Modified-Since header on our
own. so to stop url-retrieve from doing so, i'm temporarily mapping
url-cache-extract to the nil function.

** TODO ask on the emacs mailinglist for another solution
** TODO implement etags instead
